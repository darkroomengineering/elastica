"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/(pages)/home/page",{

/***/ "(app-pages-browser)/../packages/react/dist/elastic-collisions-react.mjs":
/*!***********************************************************!*\
  !*** ../packages/react/dist/elastic-collisions-react.mjs ***!
  \***********************************************************/
/***/ (function(__webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CollisionBox: function() { return /* binding */ CollisionBox; },\n/* harmony export */   \"default\": function() { return /* binding */ ReactElasticCollision; },\n/* harmony export */   dragForcePresetsLib: function() { return /* binding */ u; },\n/* harmony export */   initalConditionsPresets: function() { return /* binding */ l; },\n/* harmony export */   updatePresets: function() { return /* binding */ d; },\n/* harmony export */   useElasticCollision: function() { return /* binding */ useElasticCollision; }\n/* harmony export */ });\n/* harmony import */ var _darkroom_engineering_hamo__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @darkroom.engineering/hamo */ \"(app-pages-browser)/../node_modules/.pnpm/@darkroom.engineering+hamo@0.6.45_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/@darkroom.engineering/hamo/dist/hamo.modern.mjs\");\n/* harmony import */ var _use_gesture_react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @use-gesture/react */ \"(app-pages-browser)/../node_modules/.pnpm/@use-gesture+react@10.3.1_react@18.3.1/node_modules/@use-gesture/react/dist/use-gesture-react.esm.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/.pnpm/next@14.2.4_@babel+core@7.24.9_react-dom@18.3.1_react@18.3.1__react@18.3.1_sass@1.77.8/node_modules/next/dist/compiled/react/index.js\");\nvar _s = $RefreshSig$();\n\n\n\nfunction _extends() {\n    return _extends = Object.assign ? Object.assign.bind() : function(i) {\n        for(var t = 1; t < arguments.length; t++){\n            var s = arguments[t];\n            for(var e in s)({}).hasOwnProperty.call(s, e) && (i[e] = s[e]);\n        }\n        return i;\n    }, _extends.apply(null, arguments);\n}\nclass ElasticCollision {\n    initialConditions(i, t) {\n        let s = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : ()=>{};\n        this.container = t, this.dimensions = i.map((i, t)=>{\n            if (!i) return [\n                0,\n                0\n            ];\n            this.externalForces[t] = [\n                0,\n                0\n            ];\n            const { rect: s } = i;\n            return [\n                s.width / 2,\n                s.height / 2\n            ];\n        }), s(this), this.positions.forEach((t, s)=>{\n            var _i_s;\n            this.hash[s] = Math.floor(this.gridSize * (t[0] / this.container.width)) + Math.floor(this.gridSize * (t[1] / this.container.height)) * this.gridSize, this.setPosition((_i_s = i[s]) === null || _i_s === void 0 ? void 0 : _i_s.element, {\n                x: t[0],\n                y: t[1]\n            });\n        });\n    }\n    polarCoordinates(i) {\n        return {\n            speed: Math.sqrt(i[0] * i[0] + i[1] * i[1]),\n            angle: Math.atan2(i[1], i[0])\n        };\n    }\n    cartesianCoordinates(i, t) {\n        return [\n            i * Math.cos(t),\n            i * Math.sin(t)\n        ];\n    }\n    hasBounced(i) {\n        return this.bounced[i] += 1;\n    }\n    setPosition(i, param) {\n        let { x: t = 0, y: s = 0, z: e = 0 } = param;\n        i && (i.style.cssText = \"transform: translate3d(\".concat(t, \"px, \").concat(s, \"px, \").concat(e, \"px);\"));\n    }\n    rigidBorders(i) {\n        if (\"rigid\" !== this.calculateBorders) return;\n        const t = this.containerOffsets.top, s = this.containerOffsets.left, e = this.containerOffsets.right + 1, o = this.containerOffsets.bottom + 1;\n        for(let n = 0; n < i.length; n++){\n            const i = this.dimensions[n];\n            let r = this.velocities[n], h = this.positions[n];\n            h[1] < i[1] + this.container.height * t && (this.hasBounced(n), this.velocities[n][1] = -r[1], this.positions[n][1] = i[1] + this.container.height * t), h[0] < i[0] + this.container.width * s && (this.hasBounced(n), this.velocities[n][0] = -r[0], this.positions[n][0] = i[0] + this.container.width * s), h[1] > this.container.height * o - i[1] && (this.hasBounced(n), this.velocities[n][1] = -r[1], this.positions[n][1] = this.container.height * o - i[1]), h[0] > this.container.width * e - i[0] && (this.hasBounced(n), this.velocities[n][0] = -r[0], this.positions[n][0] = this.container.width * e - i[0]);\n        }\n    }\n    periodicBorders(i) {\n        if (\"periodic\" !== this.calculateBorders) return;\n        const t = this.containerOffsets.top, s = this.containerOffsets.left, e = this.containerOffsets.right + 1, o = this.containerOffsets.bottom + 1;\n        for(let n = 0; n < i.length; n++){\n            const i = this.dimensions[n];\n            let r = this.positions[n], h = this.velocities[n].map((i)=>Math.sign(i));\n            console.log(\"left\", r[0], i[0], this.container.width * s), -1 === h[1] && r[1] < i[1] + this.container.height * t && (this.positions[n][1] = i[1] + this.container.height * o), 1 === h[1] && r[1] > this.container.height * o - i[1] && (this.positions[n][1] = this.container.height * t - i[1]), -1 === h[0] && r[0] < i[0] + this.container.width * s && (this.positions[n][0] = i[0] + this.container.width * e), 1 === h[0] && r[0] > this.container.width * e - i[0] && (this.positions[n][0] = this.container.width * s - i[0]);\n        }\n    }\n    isNeighboor(i, t) {\n        const s = this.hash[t];\n        let e = this.hash[i], o = !1;\n        for(let i = -1; i < 2; i++)for(let t = -1; t < 2; t++){\n            let n = e + this.gridSize * i + t;\n            if (!(n < 0 || n > this.gridSize * this.gridSize) && n === s) {\n                o = !0;\n                break;\n            }\n        }\n        return o;\n    }\n    axisAlignedBoundaryBoxes(i, t) {\n        const s = this.dimensions[i], e = this.positions[i], o = this.dimensions[t], n = this.positions[t];\n        return e.map((i, t)=>Math.abs(i - n[t]) < s[t] + o[t]).every((i)=>i);\n    }\n    calculateSuperposition(i, t) {\n        let s = [\n            0,\n            0\n        ];\n        const e = this.positions[i], o = this.dimensions[i], n = this.positions[t], r = this.dimensions[t], h = e.map((i, t)=>o[t] + r[t] - Math.abs(i - n[t]));\n        return h[0] < h[1] ? e[0] < n[0] ? s[0] = h[0] : s[0] = -h[0] : e[1] < n[1] ? s[1] = h[1] : s[1] = -h[1], s.map((i)=>i + Math.random() * this.collisionRandomness);\n    }\n    collisions(i) {\n        if (this.calculatecCollisions) {\n            this.collisionsList = [];\n            for(let t = 0; t < i.length; t++){\n                let i = this.velocities[t];\n                this.hash.forEach((s, e)=>{\n                    if (e === t) return;\n                    let o = this.velocities[e];\n                    if (this.collisionsList.some((param)=>{\n                        let { loop: i, inHash: s } = param;\n                        return i === e && s === t;\n                    })) return;\n                    if (!this.isNeighboor(t, e)) return;\n                    if (!this.axisAlignedBoundaryBoxes(t, e)) return;\n                    this.collisionsList.push({\n                        loop: t,\n                        inHash: e\n                    });\n                    const n = .5 * (i.reduce((i, t)=>i + t * t, 0) + o.reduce((i, t)=>i + t * t, 0)), r = this.calculateSuperposition(t, e);\n                    let h = i.map((i, t)=>i + r[t]), a = o.map((i, t)=>i - r[t]);\n                    const c = .5 * (h.reduce((i, t)=>i + t * t, 0) + a.reduce((i, t)=>i + t * t, 0));\n                    if (0 !== c) {\n                        const i = Math.sqrt(n / c);\n                        h = h.map((t)=>t * i), a = a.map((t)=>t * i);\n                    }\n                    this.velocities[t] = a, this.velocities[e] = h;\n                });\n            }\n        }\n    }\n    update(i, t) {\n        this.rigidBorders(i), this.periodicBorders(i), this.collisions(i), t(this), this.positions.forEach((i, t)=>{\n            this.hash[t] = Math.floor(this.gridSize * i[0] / this.container.width) + Math.floor(this.gridSize * i[1] / this.container.height) * this.gridSize;\n        });\n    }\n    constructor({ gridSize: i = 4, containerOffsets: t = {\n        top: 0,\n        bottom: 0,\n        left: 0,\n        right: 0\n    }, collisions: s = !0, borders: e = \"rigid\", collisionRandomness: o = 0 } = {}){\n        this.calculatecCollisions = s, this.calculateBorders = e, this.collisionRandomness = o, this.gridSize = i, this.containerOffsets = t, this.positions = [], this.velocities = [], this.externalForces = [], this.dimensions = [], this.bounced = [], this.hash = [], this.container = {}, this.collisionsList = [];\n    }\n}\nconst l = {\n    random: function randomInitialConditions(param) {\n        let { boxes: i, positions: t, velocities: s, container: e } = param;\n        i.forEach((i, o)=>{\n            t[o] = [\n                Math.random() * e.width,\n                Math.random() * e.height\n            ], s[o] = [\n                .5 * (Math.random() - .5),\n                .5 * (Math.random() - .5)\n            ];\n        });\n    }\n};\nconst d = {\n    dvdAnimation: function dvdAnimation(param) {\n        let { boxes: i, positions: t, velocities: s, deltaTime: e } = param;\n        i.forEach((i, o)=>{\n            t[o] = t[o].map((i, t)=>i + s[o][t] * e);\n        });\n    },\n    DragAndGravity: function DragAndGravity(param) {\n        let { boxes: i, positions: t, velocities: s, deltaTime: e, externalForces: o } = param;\n        i.forEach((i, n)=>{\n            let r = s[n], h = t[n], a = o[n];\n            const c = [\n                0,\n                -.1\n            ];\n            r = r.map((i, t)=>i + -.001 * e * (i - 4 * a[t] + c[t])), h = h.map((i, t)=>i + r[t] * e), t[n] = h, s[n] = r, o[n] = [\n                0,\n                0\n            ];\n        });\n    },\n    rightFlow: function rightFlow(param) {\n        let { boxes: i, positions: t, velocities: s, externalForces: e, deltaTime: o } = param;\n        i.forEach((i, n)=>{\n            let r = s[n], h = t[n], a = e[n];\n            const c = [\n                .25,\n                0\n            ];\n            r = r.map((i, t)=>i + -.001 * o * (i - 4 * a[t] + c[t])), t[n] = h = h.map((i, t)=>i + r[t] * o), t[n] = h, s[n] = r, e[n] = [\n                0,\n                0\n            ];\n        });\n    }\n};\nconst u = {\n    default: function dragForce(i, t, s) {\n        let e = i.map((i)=>i * i).reduce((i, t)=>i + t);\n        e = Math.sqrt(e), 0 !== e && (t[s] = i.map((i)=>i / e));\n    }\n};\nconst f = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)({});\nfunction useElasticCollision() {\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(f);\n}\nfunction ReactElasticCollision(param) {\n    let { children: s, className: o, config: c = {\n        gridSize: 8,\n        collisions: !0,\n        borders: \"rigid\",\n        containerOffsets: {\n            top: 0,\n            bottom: 0,\n            left: 0,\n            right: 0\n        }\n    }, initialConditions: l = ()=>{}, update: d = ()=>{} } = param;\n    const u = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(new Map), [m, p] = (0,_darkroom_engineering_hamo__WEBPACK_IMPORTED_MODULE_1__.useRect)(), [g] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(()=>new ElasticCollision(c)), v = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((i, t)=>{\n        u.current.set(i, t);\n    }, []), x = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((i)=>{\n        u.current.delete(i);\n    }, []);\n    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        const i = [\n            ...u.current.values()\n        ];\n        (function isEmptyArray(i) {\n            return !i || Array.isArray(i) && 0 === i.length;\n        })(i) || i.some((param)=>{\n            let { rect: i } = param;\n            return !i;\n        }) || g.initialConditions(i, p, (t)=>l({\n                boxes: i,\n                ...t\n            }));\n    }, [\n        g,\n        p\n    ]), (0,_darkroom_engineering_hamo__WEBPACK_IMPORTED_MODULE_1__.useFrame)((i, t)=>{\n        const s = [\n            ...u.current.values()\n        ];\n        g.update(s, (i)=>{\n            d({\n                boxes: s,\n                ...i,\n                deltaTime: t\n            }), s.forEach((t, s)=>{\n                const e = i.positions[s], o = i.dimensions[s];\n                i === null || i === void 0 ? void 0 : i.setPosition(t === null || t === void 0 ? void 0 : t.element, {\n                    x: e[0] - o[0],\n                    y: e[1]\n                });\n            });\n        });\n    }), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", {\n        className: o,\n        ref: m,\n        style: {\n            position: \"relative\",\n            width: \"100%\",\n            height: \"100%\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(f.Provider, {\n        value: {\n            addBox: v,\n            removeBox: x,\n            elasticCollision: g\n        }\n    }, s));\n}\n_c = ReactElasticCollision;\nfunction CollisionBox(param) {\n    let { className: t, children: o, onDragStop: r = null, index: h = 0, ...c } = param;\n    _s();\n    const { addBox: l, removeBox: d, elasticCollision: u } = useElasticCollision(), [f, m] = (0,_darkroom_engineering_hamo__WEBPACK_IMPORTED_MODULE_1__.useRect)(), p = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)();\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (p.current) return l(p.current, {\n            element: p.current,\n            rect: m\n        }), ()=>{\n            d(p.current);\n        };\n    }, [\n        m,\n        l,\n        d\n    ]);\n    const g = (0,_use_gesture_react__WEBPACK_IMPORTED_MODULE_2__.useDrag)((param)=>{\n        let { down: i, movement: [t, s] } = param;\n        i && r([\n            t,\n            s\n        ], u.externalForces, h);\n    });\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", _extends({\n        ref: (i)=>{\n            p.current = i, f(i);\n        },\n        className: t,\n        style: {\n            touchAction: \"none\"\n        }\n    }, c), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(\"div\", g(), o));\n}\n_s(CollisionBox, \"btanLGYeOd65KmA2Ov2a1xBJhTk=\", false, function() {\n    return [\n        useElasticCollision,\n        useElasticCollision,\n        useElasticCollision\n    ];\n});\n_c1 = CollisionBox;\n //# sourceMappingURL=elastic-collisions-react.mjs.map\nvar _c, _c1;\n$RefreshReg$(_c, \"ReactElasticCollision\");\n$RefreshReg$(_c1, \"CollisionBox\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = __webpack_module__.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                __webpack_module__.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                __webpack_module__.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        __webpack_module__.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    __webpack_module__.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../packages/react/dist/elastic-collisions-react.mjs\n"));

/***/ })

});